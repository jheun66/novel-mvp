services:
  postgres:
    image: postgres
    container_name: novel-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: novel-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@novel.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  #  novel-backend:
  #    build: .
  #    container_name: novel-backend
  #    restart: unless-stopped
  #    ports:
  #      - "8080:8080"
  #    environment:
  #      # Database
  #      DB_URL: jdbc:postgresql://postgres:5432/novel_db
  #      DB_USER: novel_user
  #      DB_PASSWORD: novel_password
  #
  #      # API Keys (set these in .env file)
  #      OPENAI_API_KEY: ${OPENAI_API_KEY}
  #      GEMINI_API_KEY: ${GEMINI_API_KEY}
  #      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
  #
  #      # JWT
  #      JWT_SECRET: ${JWT_SECRET:-your-256-bit-secret-key-for-jwt-signing-in-production}
  #
  #      # OAuth
  #      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-your-google-client-id}
  #      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-your-google-client-secret}
  #    depends_on:
  #      postgres:
  #        condition: service_healthy
  #    healthcheck:
  #      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  #      interval: 30s
  #      timeout: 3s
  #      retries: 3

#  fish-speech:
#    image: fishaudio/fish-speech:latest
#    platform: linux/amd64
#    container_name: fish-speech
#    restart: unless-stopped
#    ports:
#      - "7860:7860"
#    environment:
#      - GRADIO_SERVER_NAME=0.0.0.0
#      - GRADIO_SERVER_PORT=7860
#    volumes:
#      - ./checkpoints:/opt/fish-speech/checkpoints
#      - ./outputs:/opt/fish-speech/outputs
#    working_dir: /opt/fish-speech
#    command: >
#      python -m tools.run_webui

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
